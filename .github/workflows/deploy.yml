name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: crpi-ugyx05de0vzs31uj.cn-guangzhou.personal.cr.aliyuncs.com
  IMAGE_NAME: deepfake-hub/dfhb

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven
      run: mvn -B clean package -Pprod -DskipTests

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifact
        path: target/*.jar
        retention-days: 1

  docker-build:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: jar-artifact
        path: target/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set full image name
      run: |
        echo "FULL_IMAGE_NAME=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_ENV
        echo "Full image name: $FULL_IMAGE_NAME"

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.ALIYUN_REGISTRY_USERNAME }}
        password: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.FULL_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-,format=short
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: [build, docker-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          # 设置变量
          SHORT_COMMIT=$(echo ${{ github.sha }} | cut -c1-7)
          IMAGE_NAME=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          FULL_IMAGE_TAG=$IMAGE_NAME:main-$SHORT_COMMIT
          APP_DIR="/app/Deepfake-rear"

          echo "Starting deployment with docker compose..."
          echo "App Image: $FULL_IMAGE_TAG"

          # 登录到镜像仓库
          echo "Logging into container registry..."
          echo ${{ secrets.ALIYUN_REGISTRY_PASSWORD }} | sudo docker login ${{ env.REGISTRY }} -u ${{ secrets.ALIYUN_REGISTRY_USERNAME }} --password-stdin

          # 进入应用目录
          cd $APP_DIR

          # 拉取最新代码
          echo "Pulling latest code from repository..."
          git checkout main
          git fetch --all
          git reset --hard origin/main

          # 确保docker-compose存在
          if [ ! -f "docker-compose.yml" ]; then
            echo "Error: docker-compose.yml not found!"
            exit 1
          fi

          # 拉取最新应用镜像
          echo "Pulling latest application image..."
          sudo docker pull $FULL_IMAGE_TAG

          # 设置环境变量并使用docker-compose启动服务
          echo "Starting services with docker-compose..."

          # 停止现有服务并清理旧的环境文件
          sudo docker compose down || true
          sudo rm -f .env

          # 创建 .env 文件来传递环境变量
          echo "APP_IMAGE=$FULL_IMAGE_TAG" | sudo tee .env

          # 启动所有服务
          sudo docker compose up -d

          # 等待服务启动
          echo "Waiting for services to start..."
          sleep 30

          # 检查服务状态
          echo "Checking service status..."
          sudo docker compose ps

          # 检查应用健康状态
          echo "Checking application health..."
          for i in {1..3}; do
            if curl -f http://localhost:8888/actuator/health > /dev/null 2>&1; then
              echo "Application is healthy!"
              break
            fi
            echo "Waiting for application to be healthy... ($i/10)"
            sleep 10
          done

          # 清理未使用的镜像
          echo "Cleaning up unused images..."
          sudo docker image prune -f

          # 查看应用日志（最后20行）
          echo "Application logs:"
          sudo docker compose logs --tail=20 deepfake-app

          echo "Deployment completed successfully!"

