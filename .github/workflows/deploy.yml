name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven
      run: mvn -B clean package -Pprod -DskipTests

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v3
      with:
        name: jar-artifact
        path: target/*.jar
        retention-days: 1

  docker-build:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Download JAR artifact
      uses: actions/download-artifact@v3
      with:
        name: jar-artifact
        path: target/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: [build, docker-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          # 设置变量
          IMAGE_TAG=${{ github.sha }}
          IMAGE_NAME=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          CONTAINER_NAME="deepfake-app"

          echo "Starting deployment process..."
          echo "Image: $IMAGE_NAME:main-$IMAGE_TAG"

          # 登录到镜像仓库
          echo "Logging into container registry..."
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

          # 拉取最新镜像
          echo "Pulling latest image..."
          docker pull $IMAGE_NAME:main-$IMAGE_TAG

          # 停止并删除现有容器
          echo "Stopping existing container..."
          docker stop $CONTAINER_NAME || true
          docker rm $CONTAINER_NAME || true

          # 删除旧的镜像（保留最近的3个）
          echo "Cleaning up old images..."
          docker images $IMAGE_NAME --format "table {{.Repository}}:{{.Tag}}" | grep -v REPOSITORY | tail -n +4 | xargs -r docker rmi || true

          # 运行新容器
          echo "Starting new container..."
          docker run -d \
            --name $CONTAINER_NAME \
            --restart unless-stopped \
            -p 8888:8888 \
            -e JAVA_OPTS="-Xmx512m -Xms256m -Djava.security.egd=file:/dev/./urandom" \
            -e SPRING_PROFILES_ACTIVE=prod \
            -v /app/logs:/app/logs \
            -v /app/uploads:/app/uploads \
            $IMAGE_NAME:main-$IMAGE_TAG

          # 等待容器启动
          echo "Waiting for container to start..."
          sleep 10

          # 检查容器状态
          echo "Checking container status..."
          docker ps | grep $CONTAINER_NAME

          # 查看容器日志（最后20行）
          echo "Container logs:"
          docker logs --tail 20 $CONTAINER_NAME

          echo "Deployment completed successfully!"
