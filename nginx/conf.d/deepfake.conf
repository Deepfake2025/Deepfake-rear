# 隐藏Nginx版本号，提升安全性。
server_tokens off;

# 上游服务器组配置，用于负载均衡或反向代理。
upstream my_backend {
    # 负载均衡算法，默认为轮询(round-robin)。
    # 其他算法：least_conn（最少连接）, ip_hash（基于IP的会话保持）
    # least_conn;

    # 定义后端服务器。
    server localhost:8888; # weight=权重，值越大分配请求越多。
    
    # 可配置健康检查，但通常需要Nginx Plus或使用第三方模块。
    # 在开源版中，Nginx会自动标记故障服务器，并在一段时间后重试。
}

upstream oss_backend {
    server user-images-bucket.oss-cn-guangzhou-internal.aliyuncs.com:80;
}

# 虚拟主机配置块。一个server块代表一个网站或服务。
server {
    # 监听端口。80是标准HTTP端口。
    listen 10001;
    
    # 服务器名称（域名）。可以写多个，用空格隔开。
    # 支持通配符(*)和正则表达式(~)。
    server_name 8.138.83.109;

    # 网站文件的根目录。
    # root /usr/share/nginx/html;
    
    # 默认索引文件。当请求以/结尾时，Nginx会按顺序查找这些文件。
    # index index.html index.htm;

    # ================================
    # Location 块：根据请求的URI进行配置。
    # 匹配优先级：= > ^~ > ~/~* > 无修饰符的前缀匹配 > /
    # ================================

    # 精确匹配。只匹配 /exact
    # location = /exact {
        # ... 配置
    # }

    # 优先前缀匹配。匹配以 /images/ 开头的任何路径，且停止搜索正则表达式。
    location ^~ /avatar/ {
        # 代理到上游定义的OSS后端
        proxy_pass http://oss_backend;

        # 关键配置：确保HTTP/1.1协议和长连接生效
        proxy_http_version 1.1;
        proxy_set_header Connection "";

        # 关键配置：将Host头设置为OSS的Bucket内网域名，确保签名验证通过
        # 【必须修改】替换为Bucket内网域名
        proxy_set_header Host "user-images-bucket.oss-cn-guangzhou-internal.aliyuncs.com";

        # 转发客户端真实IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;

        # CORS跨域配置 (用于头像资源访问)
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;

        # 设置代理超时时间
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;

        # 允许上传的最大文件大小，0表示不限制。根据业务需求设置
        client_max_body_size 1024m;
    }

    # 通用前缀匹配。这是最常用的location类型。
    location / {
        # 将请求代理到上游服务器组
        proxy_pass http://my_backend/; # 注意结尾的/，它会将/api/拼接到后端URL。

        # 设置传递给后端服务器的HTTP头信息，至关重要！
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # CORS跨域配置
        # 处理预检请求(OPTIONS)
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        # 为所有响应添加CORS头
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

        # 超时设置
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;

        # 缓冲设置，防止快客户端拖慢后端。
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
    }
}
